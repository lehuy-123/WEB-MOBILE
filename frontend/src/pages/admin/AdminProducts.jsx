// src/pages/admin/AdminProducts.jsx

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import ProductForm from '../../components/ProductForm';
import { fetchAllProducts } from '../../api/productAPI';
import '../../styles/AdminProducts.css';

const AdminProducts = () => {
  const [products, setProducts] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [keyword, setKeyword] = useState('');
  const [editingProduct, setEditingProduct] = useState(null); // ‚úÖ th√™m state ƒë·ªÉ s·ª≠a s·∫£n ph·∫©m

  useEffect(() => {
    fetchAllProducts()
      .then((data) => {
        setProducts(data);
        setFiltered(data);
      })
      .catch((err) => {
        console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', err);
      });
  }, []);

  const handleSearch = () => {
    const result = products.filter(p =>
      p.name?.toLowerCase().includes(keyword.toLowerCase())
    );
    setFiltered(result);
  };

  const handleDelete = async (id) => {
    const token = JSON.parse(localStorage.getItem('user'))?.token;
    const confirmDelete = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° s·∫£n ph·∫©m n√†y kh√¥ng?');
    if (!confirmDelete) return;

    try {
      await axios.delete(`http://localhost:5001/api/products/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setProducts(prev => prev.filter(p => p._id !== id));
      setFiltered(prev => prev.filter(p => p._id !== id));
      alert('‚úÖ Xo√° s·∫£n ph·∫©m th√†nh c√¥ng');
    } catch (err) {
      console.error('‚ùå L·ªói khi xo√° s·∫£n ph·∫©m:', err);
      alert('Xo√° s·∫£n ph·∫©m th·∫•t b·∫°i');
    }
  };

  const handleSaveProduct = async (productData) => {
    const token = JSON.parse(localStorage.getItem('user'))?.token;

    try {
      let response;

      if (editingProduct) {
        response = await axios.put(`http://localhost:5001/api/products/${editingProduct._id}`, productData, {
          headers: { Authorization: `Bearer ${token}` }
        });
        alert('‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng');
        setProducts(prev =>
          prev.map(p => (p._id === editingProduct._id ? response.data : p))
        );
        setFiltered(prev =>
          prev.map(p => (p._id === editingProduct._id ? response.data : p))
        );
      } else {
        response = await axios.post('http://localhost:5001/api/products', productData, {
          headers: { Authorization: `Bearer ${token}` }
        });
        alert('‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng');
        setProducts(prev => [...prev, response.data]);
        setFiltered(prev => [...prev, response.data]);
      }

      setEditingProduct(null); // reset form
    } catch (err) {
      console.error('‚ùå L·ªói khi l∆∞u s·∫£n ph·∫©m:', err);
      alert('Thao t√°c th·∫•t b·∫°i');
    }
  };

  return (
    <div className="admin-products">
      <h2>üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>

      <div className="search-bar">
        <input
          type="text"
          placeholder="üîé Nh·∫≠p t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¨m..."
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
        />
        <button onClick={handleSearch}>T√¨m ki·∫øm</button>
      </div>

      <ProductForm onSubmit={handleSaveProduct} editingProduct={editingProduct} />

      <div className="product-table">
        <table>
          <thead>
            <tr>
              <th>T√™n</th>
              <th>Gi√°</th>
              <th>·∫¢nh</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((p, index) => (
              <tr key={index}>
                <td>{p.name || 'Kh√¥ng c√≥ t√™n'}</td>
                <td>{typeof p.price === 'number' ? `${p.price.toLocaleString()} VND` : 'Ch∆∞a c·∫≠p nh·∫≠t'}</td>
                <td>
                  {p.image ? (
                    <img src={p.image} alt={p.name || '·∫£nh s·∫£n ph·∫©m'} height={40} />
                  ) : (
                    'Kh√¥ng c√≥ ·∫£nh'
                  )}
                </td>
                <td>
                  <button onClick={() => setEditingProduct(p)}>‚úèÔ∏è S·ª≠a</button>{' '}
                  <button onClick={() => handleDelete(p._id)} className="delete-button">üóë Xo√°</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminProducts;
