const Product = require('../models/Product');

// L·∫•y to√†n b·ªô s·∫£n ph·∫©m
exports.getAllProducts = async (req, res) => {
  try {
    const { category, brand, type } = req.query;
    let filter = {};

    if (category) filter.category = category;
    if (brand) filter.brand = brand;
    if (type) filter.type = type;
    
    const products = await Product.find(filter);
    res.json(products);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m', error: err.message });
  }
};

// H√†m chu·∫©n h√≥a boolean cho tr∆∞·ªùng flagship
function parseFlagship(raw) {
  return raw === true || raw === 'true' || raw === 1 || raw === '1' || raw === 'on' || raw === 'checked';
}

// T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
exports.searchProducts = async (req, res) => {
  try {
    const keyword = req.query.q || '';
    const results = await Product.find({
      name: { $regex: keyword, $options: 'i' }
    });
    res.json(results);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m', error: err.message });
  }
};

// L·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t (top 2 m·ªõi nh·∫•t)
exports.getFeaturedProducts = async (req, res) => {
  try {
    const featured = await Product.find({}).sort({ createdAt: -1 }).limit(2);
    res.json(featured);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t', error: err.message });
  }
};

// L·∫•y s·∫£n ph·∫©m b√°n ch·∫°y
exports.getBestSellers = async (req, res) => {
  try {
    const bestSellers = await Product.find({ sold: { $gt: 50 } })
      .sort({ sold: -1 })
      .limit(8);
    res.json(bestSellers);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y s·∫£n ph·∫©m b√°n ch·∫°y', error: err.message });
  }
};

// S·∫Øp x·∫øp s·∫£n ph·∫©m
exports.sortProducts = async (req, res) => {
  try {
    const sortBy = req.query.by || 'price';
    let sortQuery = {};

    if (sortBy === 'price') sortQuery = { price: 1 };
    else if (sortBy === 'rating') sortQuery = { rating: -1 };
    else if (sortBy === 'newest') sortQuery = { createdAt: -1 };
    else return res.status(400).json({ message: 'Tham s·ªë sort kh√¥ng h·ª£p l·ªá' });

    const sorted = await Product.find({}).sort(sortQuery);
    res.json(sorted);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi s·∫Øp x·∫øp s·∫£n ph·∫©m', error: err.message });
  }
};

// T·∫°o m·ªõi s·∫£n ph·∫©m
exports.createProduct = async (req, res) => {
  try {
    let { name, brand, description, variants, specs, content, category, subcategory, price, flagship } = req.body;
    console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c (createProduct):', req.body, 'File:', req.file);

    // X·ª≠ l√Ω variants
    let variantsParsed = variants;
    if (typeof variants === 'string') {
      try {
        variantsParsed = JSON.parse(variants);
      } catch (err) {
        console.error('L·ªói parse variants:', err.message);
        return res.status(400).json({ message: 'Tr∆∞·ªùng variants kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON', error: err.message });
      }
    }

    // X·ª≠ l√Ω specs
    let specsParsed = specs;
    if (typeof specs === 'string') {
      try {
        specsParsed = JSON.parse(specs) || [];
      } catch (err) {
        console.error('L·ªói parse specs:', err.message);
        return res.status(400).json({ message: 'Tr∆∞·ªùng specs kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON', error: err.message });
      }
    }

    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!name || !variantsParsed || !Array.isArray(variantsParsed) || variantsParsed.length === 0) {
      console.error('D·ªØ li·ªáu b·∫Øt bu·ªôc thi·∫øu:', { name, variantsParsed });
      return res.status(400).json({ message: 'T√™n s·∫£n ph·∫©m v√† variants l√† b·∫Øt bu·ªôc' });
    }

    // X·ª≠ l√Ω variants
    const processedVariants = variantsParsed.map((variant, index) => {
      if (!variant || typeof variant !== 'object') {
        console.error(`Bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá t·∫°i index ${index}:`, variant);
        return res.status(400).json({ message: `Bi·∫øn th·ªÉ t·∫°i index ${index} kh√¥ng h·ª£p l·ªá` });
      }
      const price = Number(variant.price);
      const quantity = Number(variant.quantity);
      if (isNaN(price) || isNaN(quantity)) {
        console.error(`Gi√° ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá t·∫°i index ${index}:`, { price, quantity });
        return res.status(400).json({ message: `Gi√° ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá t·∫°i bi·∫øn th·ªÉ ${index}` });
      }
      return {
        color: variant.color || '',
        ram: variant.ram || '',
        storage: variant.storage || '',
        price,
        quantity,
        images: Array.isArray(variant.images) ? variant.images : []
      };
    });

    const newProduct = new Product({
      name,
      brand: brand || '',
      description: description || '',
      variants: processedVariants,
      specs: specsParsed || [],
      content: content || '',
      category: category || '',
      subcategory: subcategory || '',
      price: Number(price) || 0,
      sold: 0,
      image: req.file?.filename || '',
      flagship: parseFlagship(flagship)
    });

    await newProduct.save();
    res.status(201).json(newProduct);
  } catch (err) {
    console.error('L·ªói t·∫°o s·∫£n ph·∫©m:', err.message, err.stack);
    res.status(500).json({ message: 'L·ªói khi t·∫°o s·∫£n ph·∫©m', error: err.message });
  }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.updateProduct = async (req, res) => {
  try {
    let { name, brand, description, variants, specs, content, category, subcategory, price, flagship } = req.body;
    console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c (updateProduct):', req.body, 'File:', req.file);

    // X·ª≠ l√Ω variants
    let variantsParsed = variants;
    if (typeof variants === 'string') {
      try {
        variantsParsed = JSON.parse(variants);
      } catch (err) {
        console.error('L·ªói parse variants:', err.message);
        return res.status(400).json({ message: 'Tr∆∞·ªùng variants kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON', error: err.message });
      }
    }

    // X·ª≠ l√Ω specs
    let specsParsed = specs;
    if (typeof specs === 'string') {
      try {
        specsParsed = JSON.parse(specs) || [];
      } catch (err) {
        console.error('L·ªói parse specs:', err.message);
        return res.status(400).json({ message: 'Tr∆∞·ªùng specs kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON', error: err.message });
      }
    }

    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!name || !variantsParsed || !Array.isArray(variantsParsed) || variantsParsed.length === 0) {
      console.error('D·ªØ li·ªáu b·∫Øt bu·ªôc thi·∫øu:', { name, variantsParsed });
      return res.status(400).json({ message: 'T√™n s·∫£n ph·∫©m v√† variants l√† b·∫Øt bu·ªôc' });
    }

    // X·ª≠ l√Ω variants
    const processedVariants = variantsParsed.map((variant, index) => {
      if (!variant || typeof variant !== 'object') {
        console.error(`Bi·∫øn th·ªÉ kh√¥ng h·ª£p l·ªá t·∫°i index ${index}:`, variant);
        return res.status(400).json({ message: `Bi·∫øn th·ªÉ t·∫°i index ${index} kh√¥ng h·ª£p l·ªá` });
      }
      const price = Number(variant.price);
      const quantity = Number(variant.quantity);
      if (isNaN(price) || isNaN(quantity)) {
        console.error(`Gi√° ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá t·∫°i index ${index}:`, { price, quantity });
        return res.status(400).json({ message: `Gi√° ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá t·∫°i bi·∫øn th·ªÉ ${index}` });
      }
      return {
        color: variant.color || '',
        ram: variant.ram || '',
        storage: variant.storage || '',
        price,
        quantity,
        images: Array.isArray(variant.images) ? variant.images : []
      };
    });

    // T√¨m s·∫£n ph·∫©m
    const product = await Product.findById(req.params.id);
    if (!product) {
      console.error('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m:', req.params.id);
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    }

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu
    product.name = name;
    product.brand = brand || product.brand;
    product.description = description || product.description;
    product.variants = processedVariants;
    product.specs = specsParsed || product.specs;
    product.content = content || product.content;
    product.category = category || product.category;
    product.subcategory = subcategory || product.subcategory;
    product.price = Number(price) || product.price;
    product.flagship = parseFlagship(flagship);
    if (req.file) {
      product.image = req.file.filename;
    }

    // L∆∞u s·∫£n ph·∫©m
    await product.save();
    res.json(product);
  } catch (err) {
    console.error('L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', err.message, err.stack);
    res.status(500).json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i', error: err.message });
  }
};

// X√≥a s·∫£n ph·∫©m
exports.deleteProduct = async (req, res) => {
  try {
    console.log('üëâ Xo√° s·∫£n ph·∫©m:', req.params.id);
    await Product.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: 'Xo√° s·∫£n ph·∫©m th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói xo√°:', err.message);
    res.status(500).json({ message: 'L·ªói khi xo√° s·∫£n ph·∫©m', error: err.message });
  }
};

// L·∫•y s·∫£n ph·∫©m theo ID
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    }
    res.json(product);
  } catch (error) {
    console.error('L·ªói truy v·∫•n s·∫£n ph·∫©m:', error);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
};