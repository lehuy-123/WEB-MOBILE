let cart = []; // üõí Mock gi·ªè h√†ng to√†n c·ª•c ‚Äì m·ªói user th·∫≠t sau n√†y s·∫Ω c√≥ ri√™ng

exports.addToCart = (req, res) => {
  const { productId, quantity } = req.body;

  // Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
  if (!productId || !quantity) {
    return res.status(400).json({ message: 'Thi·∫øu productId ho·∫∑c quantity' });
  }

  // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè th√¨ c·ªông d·ªìn
const existing = cart.find(item => item.productId === Number(productId));
if (existing) {
  existing.quantity += Number(quantity);
} else {
  cart.push({ productId: Number(productId), quantity: Number(quantity) });
}

  res.status(201).json({ message: 'ƒê√£ th√™m v√†o gi·ªè h√†ng', cart });
};







exports.getCart = (req, res) => {
  res.json(cart);
};






exports.updateCartItem = (req, res) => {
  const productId = parseInt(req.params.productId);
  const { quantity } = req.body;

  const item = cart.find(i => i.productId === productId);

  if (!item) {
    return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng' });
  }

  item.quantity = quantity;
  res.json({ message: 'ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng', cart });
};


exports.deleteCartItem = (req, res) => {
  const productId = parseInt(req.params.productId);
  const index = cart.findIndex(item => item.productId === productId);

  if (index === -1) {
    return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng' });
  }

  cart.splice(index, 1);
  res.json({ message: 'ƒê√£ xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng', cart });
};
